#!/usr/bin/env python3

""" Generate tables for pure component fluid properties.

The tables are generated using the NIST (National Institute of Standards
and Technology) Standard Reference Database Number 69
(https://doi.org/10.18434/T4D303).

Copyright for NIST Standard Reference Data is governed by the Standard
Reference Data Act (https://www.nist.gov/srd/public-law).

######################################################################
In case you are using the data generated with this script,
please cite the following publications:

P.J. Linstrom and W.G. Mallard, Eds.,
NIST Chemistry WebBook, NIST Standard Reference Database Number 69,
National Institute of Standards and Technology, Gaithersburg MD, 20899,
https://doi.org/10.18434/T4D303, (retrieved [insert date]).
######################################################################
######################################################################
This script is modified by SINTEF DIGITAL/Elyes for the H2-water system from 
<<https://github.com/Simulation-Benchmarks/11thSPE-CSP/tree/main/thermodynamics>>
"""

from io import StringIO
import argparse
import urllib
import requests
import numpy as np

parser = argparse.ArgumentParser(
    description="This script generates tables for pure component fluid properties (density, viscosity, and enthalpy) using the NIST Chemistry WebBook.\n"
)
parser.add_argument(
    "-t1", "--min_temp", required=True, type=float, help="The minimum temperature in degree Celsius."
)
parser.add_argument(
    "-t2", "--max_temp", required=True, type=float, help="The maximum temperature in degree Celsius."
)
parser.add_argument(
    "-nt",
    "--n_temp",
    required=True,
    type=int,
    help="The number of temperature sampling points."
    "min_temp is the first sampling point, max_temp the last.",
)
parser.add_argument(
    "-c", "--comp_name", required=True, help="The component name, either 'H2' or 'H2O'."
)
parser.add_argument(
    "-o", "--output", default="", help="Output filename (default: generated filename)."
)
cmdArgs = vars(parser.parse_args())

minTemp = cmdArgs["min_temp"]
maxTemp = cmdArgs["max_temp"]
nTemp = cmdArgs["n_temp"]
if nTemp == 1:
    delta_temperature = 0
else:
    delta_temperature = (maxTemp - minTemp) / (nTemp - 1)

compName = cmdArgs["comp_name"]

#Set output filename, using the default if -o is not set or empty
if cmdArgs["output"]:
    fileName = cmdArgs["output"]
else:
    fileName = f"{compName.lower()}values_{minTemp:.1f}_to_{maxTemp:.1f}_C.csv"
outFile = open(fileName, "w")
outFile.write(f"# This autogenerated file contains thermodynamic properties of {compName}.\n")
outFile.write("# The data has been obtained by querying the NIST Chemistry WebBook https://doi.org/10.18434/T4D303.\n#\n")
outFile.write("# Concerning temperature range, the following parameters have been used:\n")
outFile.write(f"# min temperature = {minTemp}, max temperature = {maxTemp}, #temperature sampling points = {nTemp}\n#\n")
outFile.write("# temperature [°C], viscosity [Pa.s], enthalpy [J/kg], density [kg/m3]\n")

# Open the file for writing
with open(fileName, 'w') as outFile:
    # Write the header first
    header = "Temperature [°C], Pressure [Pa], Density [kg/m³], Viscosity [Pa.s], Enthalpy [J/kg]\n"
    outFile.write(header)

    # Get the data
    for i in range(cmdArgs["n_temp"]):
        temperature = cmdArgs["min_temp"] + i * delta_temperature
        query = {
            "Action": "Data",
            "Wide": "on",
            "ID": "C7732185" if cmdArgs["comp_name"] == "H2O" else "C1333740",
            "Type": "IsoTherm",
            "Digits": "12",
            "PLow": str(101325),
            "PHigh": str(101326),
            "PInc": str(1),
            "T": str(temperature),
            "RefState": "DEF",
            "TUnit": "C",
            "PUnit": "Pa",
            "DUnit": "kg/m3",
            "HUnit": "kJ/kg",
            "WUnit": "m/s",
            "VisUnit": "uPas",
            "STUnit": "N/m",
        }

        response = requests.get(
            "https://webbook.nist.gov/cgi/fluid.cgi?" + urllib.parse.urlencode(query)
        )
        response.encoding = "utf-8"
        text = response.text
        phase = np.genfromtxt(StringIO(text), delimiter="\t", dtype=str, usecols=[-1], skip_header=1)
        values = np.genfromtxt(StringIO(text), delimiter="\t", names=True)

        # NIST provides additional samples at the transition points
        phaseBoundaryIndices = []
        for j in range(1, len(phase) - 1):
            if phase[j] != phase[j + 1]:
                phaseBoundaryIndices += [j, j + 1]

        pressure = np.delete(values["Pressure_Pa"], phaseBoundaryIndices)
        density = np.delete(values["Density_kgm3"], phaseBoundaryIndices)
        viscosity = np.delete(values["Viscosity_uPas"], phaseBoundaryIndices)

        # Transform unit (1e-6.Pa.s -> Pa.s)
        viscosity *= 1e-6
        enthalpy = np.delete(values["Enthalpy_kJkg"], phaseBoundaryIndices)

        # Transform unit (kJ/kg -> J/kg)
        enthalpy *= 1000

        # Only output the data for the first pressure point using zip
        if len(pressure) > 0:  # Ensure there's at least one pressure value
            first_values = zip(pressure[:1], density[:1], viscosity[:1], enthalpy[:1])  # Get first values
            for p, rho, mu, h in first_values:
                outFile.write(f"{temperature:.11e}, {p:.11e}, {rho:.11e}, {mu:.11e}, {h:.11e}\n")

print(f"A file {fileName} has been generated.")

